/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface BankInterface extends ethers.utils.Interface {
  functions: {
    "bankName()": FunctionFragment;
    "bankOwner()": FunctionFragment;
    "customerBalance(address)": FunctionFragment;
    "depositMoney()": FunctionFragment;
    "getBankBalance()": FunctionFragment;
    "getCustomerBalance()": FunctionFragment;
    "setBankName(string)": FunctionFragment;
    "withdrawMoney(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "bankName", values?: undefined): string;
  encodeFunctionData(functionFragment: "bankOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "customerBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositMoney",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBankBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCustomerBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setBankName", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdrawMoney",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "bankName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bankOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "customerBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositMoney",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBankBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCustomerBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBankName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawMoney",
    data: BytesLike
  ): Result;

  events: {
    "Deposit(address,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256,uint256)": EventFragment;
    "Withdraw(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    customer: string;
    amount: BigNumber;
    timestamp: BigNumber;
  }
>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    from: string;
    to: string;
    amount: BigNumber;
    timestamp: BigNumber;
  }
>;

export type WithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    customer: string;
    amount: BigNumber;
    timestamp: BigNumber;
  }
>;

export class Bank extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BankInterface;

  functions: {
    bankName(overrides?: CallOverrides): Promise<[string]>;

    bankOwner(overrides?: CallOverrides): Promise<[string]>;

    customerBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    depositMoney(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBankBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCustomerBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    setBankName(
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawMoney(
      _to: string,
      _total: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  bankName(overrides?: CallOverrides): Promise<string>;

  bankOwner(overrides?: CallOverrides): Promise<string>;

  customerBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  depositMoney(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBankBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getCustomerBalance(overrides?: CallOverrides): Promise<BigNumber>;

  setBankName(
    _name: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawMoney(
    _to: string,
    _total: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bankName(overrides?: CallOverrides): Promise<string>;

    bankOwner(overrides?: CallOverrides): Promise<string>;

    customerBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositMoney(overrides?: CallOverrides): Promise<void>;

    getBankBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getCustomerBalance(overrides?: CallOverrides): Promise<BigNumber>;

    setBankName(_name: string, overrides?: CallOverrides): Promise<void>;

    withdrawMoney(
      _to: string,
      _total: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Deposit(address,uint256,uint256)"(
      customer?: string | null,
      amount?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { customer: string; amount: BigNumber; timestamp: BigNumber }
    >;

    Deposit(
      customer?: string | null,
      amount?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { customer: string; amount: BigNumber; timestamp: BigNumber }
    >;

    "Transfer(address,address,uint256,uint256)"(
      from?: string | null,
      to?: string | null,
      amount?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { from: string; to: string; amount: BigNumber; timestamp: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      amount?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { from: string; to: string; amount: BigNumber; timestamp: BigNumber }
    >;

    "Withdraw(address,uint256,uint256)"(
      customer?: string | null,
      amount?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { customer: string; amount: BigNumber; timestamp: BigNumber }
    >;

    Withdraw(
      customer?: string | null,
      amount?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { customer: string; amount: BigNumber; timestamp: BigNumber }
    >;
  };

  estimateGas: {
    bankName(overrides?: CallOverrides): Promise<BigNumber>;

    bankOwner(overrides?: CallOverrides): Promise<BigNumber>;

    customerBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositMoney(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBankBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getCustomerBalance(overrides?: CallOverrides): Promise<BigNumber>;

    setBankName(
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawMoney(
      _to: string,
      _total: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bankName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bankOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    customerBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositMoney(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBankBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCustomerBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBankName(
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawMoney(
      _to: string,
      _total: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
