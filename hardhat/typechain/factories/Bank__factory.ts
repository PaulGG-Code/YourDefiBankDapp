/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Bank, BankInterface } from "../Bank";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "customer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "Deposit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "customer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "Withdraw",
    type: "event",
  },
  {
    inputs: [],
    name: "bankName",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "bankOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "customerBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "depositMoney",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getBankBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCustomerBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
    ],
    name: "setBankName",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_total",
        type: "uint256",
      },
    ],
    name: "withdrawMoney",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061107a806100606000396000f3fe60806040526004361061007b5760003560e01c80637b83b50b1161004e5780637b83b50b1461011b578063a853409a14610146578063e147aaa714610171578063f274c8971461019c5761007b565b806316c05aa21461008057806327d358011461008a57806337ebe47b146100b557806370142690146100f2575b600080fd5b6100886101c5565b005b34801561009657600080fd5b5061009f610318565b6040516100ac9190610ae1565b60405180910390f35b3480156100c157600080fd5b506100dc60048036038101906100d7919061091a565b6103a6565b6040516100e99190610ba3565b60405180910390f35b3480156100fe57600080fd5b506101196004803603810190610114919061097f565b6103be565b005b34801561012757600080fd5b50610130610466565b60405161013d9190610ba3565b60405180910390f35b34801561015257600080fd5b5061015b6104fd565b6040516101689190610ba3565b60405180910390f35b34801561017d57600080fd5b50610186610544565b6040516101939190610ac6565b60405180910390f35b3480156101a857600080fd5b506101c360048036038101906101be9190610943565b610568565b005b6000341415610209576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020090610b23565b60405180910390fd5b34600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102589190610c59565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a1534426040516102a7929190610bbe565b60405180910390a23073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f9ed053bb818ff08b8353cd46f78db1f0799f31c9e4458fdb425c10eccd2efc44344260405161030e929190610bbe565b60405180910390a3565b6001805461032590610d73565b80601f016020809104026020016040519081016040528092919081815260200182805461035190610d73565b801561039e5780601f106103735761010080835404028352916020019161039e565b820191906000526020600020905b81548152906001019060200180831161038157829003601f168201915b505050505081565b60026020528060005260406000206000915090505481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461044c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044390610b63565b60405180910390fd5b80600190805190602001906104629291906107d0565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ee90610b83565b60405180910390fd5b47905090565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ed90610b43565b60405180910390fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115610678576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066f90610b03565b60405180910390fd5b80600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106c79190610caf565b925050819055508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610714573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568824260405161075d929190610bbe565b60405180910390a23373ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167f9ed053bb818ff08b8353cd46f78db1f0799f31c9e4458fdb425c10eccd2efc4483426040516107c4929190610bbe565b60405180910390a35050565b8280546107dc90610d73565b90600052602060002090601f0160209004810192826107fe5760008555610845565b82601f1061081757805160ff1916838001178555610845565b82800160010185558215610845579182015b82811115610844578251825591602001919060010190610829565b5b5090506108529190610856565b5090565b5b8082111561086f576000816000905550600101610857565b5090565b600061088661088184610c0c565b610be7565b90508281526020810184848401111561089e57600080fd5b6108a9848285610d31565b509392505050565b6000813590506108c081610fff565b92915050565b6000813590506108d581611016565b92915050565b600082601f8301126108ec57600080fd5b81356108fc848260208601610873565b91505092915050565b6000813590506109148161102d565b92915050565b60006020828403121561092c57600080fd5b600061093a848285016108b1565b91505092915050565b6000806040838503121561095657600080fd5b6000610964858286016108c6565b925050602061097585828601610905565b9150509250929050565b60006020828403121561099157600080fd5b600082013567ffffffffffffffff8111156109ab57600080fd5b6109b7848285016108db565b91505092915050565b6109c981610ce3565b82525050565b60006109da82610c3d565b6109e48185610c48565b93506109f4818560208601610d40565b6109fd81610e63565b840191505092915050565b6000610a15602583610c48565b9150610a2082610e74565b604082019050919050565b6000610a38602983610c48565b9150610a4382610ec3565b604082019050919050565b6000610a5b602983610c48565b9150610a6682610f12565b604082019050919050565b6000610a7e603183610c48565b9150610a8982610f61565b604082019050919050565b6000610aa1603683610c48565b9150610aac82610fb0565b604082019050919050565b610ac081610d27565b82525050565b6000602082019050610adb60008301846109c0565b92915050565b60006020820190508181036000830152610afb81846109cf565b905092915050565b60006020820190508181036000830152610b1c81610a08565b9050919050565b60006020820190508181036000830152610b3c81610a2b565b9050919050565b60006020820190508181036000830152610b5c81610a4e565b9050919050565b60006020820190508181036000830152610b7c81610a71565b9050919050565b60006020820190508181036000830152610b9c81610a94565b9050919050565b6000602082019050610bb86000830184610ab7565b92915050565b6000604082019050610bd36000830185610ab7565b610be06020830184610ab7565b9392505050565b6000610bf1610c02565b9050610bfd8282610da5565b919050565b6000604051905090565b600067ffffffffffffffff821115610c2757610c26610e34565b5b610c3082610e63565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b6000610c6482610d27565b9150610c6f83610d27565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ca457610ca3610dd6565b5b828201905092915050565b6000610cba82610d27565b9150610cc583610d27565b925082821015610cd857610cd7610dd6565b5b828203905092915050565b6000610cee82610d07565b9050919050565b6000610d0082610d07565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015610d5e578082015181840152602081019050610d43565b83811115610d6d576000848401525b50505050565b60006002820490506001821680610d8b57607f821691505b60208210811415610d9f57610d9e610e05565b5b50919050565b610dae82610e63565b810181811067ffffffffffffffff82111715610dcd57610dcc610e34565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f596f75206861766520696e7375666669656e742066756e647320746f2077697460008201527f6864726177000000000000000000000000000000000000000000000000000000602082015250565b7f596f75206e65656420746f206465706f73697420736f6d6520616d6f756e742060008201527f6f66206d6f6e6579210000000000000000000000000000000000000000000000602082015250565b7f596f75206d75737420626520746865206f776e657220746f206d616b6520776960008201527f746864726177616c730000000000000000000000000000000000000000000000602082015250565b7f596f75206d75737420626520746865206f776e657220746f207365742074686560008201527f206e616d65206f66207468652062616e6b000000000000000000000000000000602082015250565b7f596f75206d75737420626520746865206f776e6572206f66207468652062616e60008201527f6b20746f2073656520616c6c2062616c616e6365732e00000000000000000000602082015250565b61100881610ce3565b811461101357600080fd5b50565b61101f81610cf5565b811461102a57600080fd5b50565b61103681610d27565b811461104157600080fd5b5056fea2646970667358221220663b89433054af34babe152fd1be443e7fb8ada0bdb8b3591ae4b85aeadf181864736f6c63430008040033";

export class Bank__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Bank> {
    return super.deploy(overrides || {}) as Promise<Bank>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Bank {
    return super.attach(address) as Bank;
  }
  connect(signer: Signer): Bank__factory {
    return super.connect(signer) as Bank__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BankInterface {
    return new utils.Interface(_abi) as BankInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Bank {
    return new Contract(address, _abi, signerOrProvider) as Bank;
  }
}
